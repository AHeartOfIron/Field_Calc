class QGISExport {
    constructor(calculator) {
        this.calculator = calculator;
    }

    exportPoints(points, siteName) {
        const pointsOnly = points.filter(p => p.type !== 'polygon');
        this.exportGeoJSON(pointsOnly, siteName + '_points');
    }

    exportPolygon(points, siteName) {
        console.log('–ü–æ—á–∞—Ç–æ–∫ exportPolygon, —Ç–æ—á–æ–∫:', points.length);
        const polygonPoints = points.filter(p => p.type === 'SP' || p.type.startsWith('TP'));
        console.log('–§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ —Ç–æ—á–∫–∏ –ø–æ–ª—ñ–≥–æ–Ω—É:', polygonPoints.length, polygonPoints.map(p => p.type));
        
        if (polygonPoints.length < 3) {
            this.calculator.showError('‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–ª—ñ–≥–æ–Ω—É');
            return;
        }
        
        this.exportPolygonGeoJSON(polygonPoints, siteName + '_polygon');
    }

    exportAll(points, siteName) {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º—ñ —Ñ–∞–π–ª–∏ –¥–ª—è —Ç–æ—á–æ–∫ —Ç–∞ –ø–æ–ª—ñ–≥–æ–Ω—É
        this.exportPoints(points, siteName);
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω –æ–∫—Ä–µ–º–æ
        const polygonPoints = points.filter(p => p.type === 'SP' || p.type.startsWith('TP'));
        if (polygonPoints.length >= 3) {
            this.exportPolygonGeoJSON(polygonPoints, siteName + '_polygon');
        }
    }
    
    exportPolygonGeoJSON(polygonPoints, fileName) {
        if (!this.calculator.currentProjection) {
            this.calculator.showError('‚ùå –û–±–µ—Ä—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (UTM –∑–æ–Ω—É)');
            return;
        }
        
        if (!window.proj4) {
            this.calculator.showError('‚ùå Proj4 –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            return;
        }
        
        if (!polygonPoints || polygonPoints.length < 3) {
            this.calculator.showError('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ—á–æ–∫ –¥–ª—è –ø–æ–ª—ñ–≥–æ–Ω—É');
            return;
        }
        
        try {
            this.calculator.showNotification('üî∫ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω GeoJSON...');
            
            // –°–æ—Ä—Ç—É—î–º–æ —Ç–æ—á–∫–∏: SP –ø–µ—Ä—à–∞, –ø–æ—Ç—ñ–º TP1, TP2...
            const sortedPoints = polygonPoints.sort((a, b) => {
                if (a.type === 'SP') return -1;
                if (b.type === 'SP') return 1;
                const aNum = parseInt(a.type.replace('TP', '')) || 0;
                const bNum = parseInt(b.type.replace('TP', '')) || 0;
                return aNum - bNum;
            });
            
            const coords = sortedPoints.map(point => {
                const latLng = proj4(this.calculator.currentProjection, 'EPSG:4326', point.coords);
                return [latLng[0], latLng[1]];
            });
            coords.push(coords[0]); // –ó–∞–º–∏–∫–∞—î–º–æ –ø–æ–ª—ñ–≥–æ–Ω
            
            const polygonFeature = {
                type: 'Feature',
                properties: {
                    NAME: fileName.replace('_polygon', ''),
                    TYPE: 'POLYGON',
                    AREA_HA: parseFloat(((this.calculator.currentArea || 0) / 10000).toFixed(4)),
                    PERIMETER: parseFloat(document.getElementById('perimeter')?.textContent?.replace(/[^\d.]/g, '') || '0'),
                    ZONE: this.calculator.getUTMZone() + 'N'
                },
                geometry: {
                    type: 'Polygon',
                    coordinates: [coords]
                }
            };
            
            const geojson = {
                type: 'FeatureCollection',
                crs: {
                    type: 'name',
                    properties: {
                        name: 'EPSG:4326'
                    }
                },
                features: [polygonFeature]
            };
            
            const blob = new Blob([JSON.stringify(geojson, null, 2)], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${fileName}.geojson`;
            a.click();
            setTimeout(() => URL.revokeObjectURL(url), 100);
            
            this.calculator.showNotification('‚úÖ –ü–æ–ª—ñ–≥–æ–Ω GeoJSON –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!');
            
            // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Å—Ç–∏–ª—å –¥–ª—è –ø–æ–ª—ñ–≥–æ–Ω—É
            this.exportPolygonStyle(fileName);
            
        } catch (error) {
            console.error('Polygon GeoJSON export error:', error);
            this.calculator.showError('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –ø–æ–ª—ñ–≥–æ–Ω—É: ' + error.message);
        }
    }

    exportStyles(siteName) {
        const qmlContent = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.28.0">
  <renderer-v2 type="RuleRenderer" symbollevels="0">
    <rules key="rules">
      <rule symbol="0" filter="&quot;TYPE&quot; = 'LM'" label="LM - –û—Ä—ñ—î–Ω—Ç–∏—Ä" key="lm"/>
      <rule symbol="1" filter="&quot;TYPE&quot; = 'BM'" label="BM - –ë–∞–∑–æ–≤–∞" key="bm"/>
      <rule symbol="2" filter="&quot;TYPE&quot; = 'SP'" label="SP - –ü–æ—á–∞—Ç–∫–æ–≤–∞" key="sp"/>
      <rule symbol="3" filter="&quot;TYPE&quot; LIKE 'TP%'" label="TP - –ü–æ–≤–æ—Ä–æ—Ç" key="tp"/>
    </rules>
    <symbols>
      <symbol type="marker" name="0" alpha="1">
        <layer class="SimpleMarker" enabled="1" locked="0">
          <Option type="Map">
            <Option type="QString" name="color" value="255,255,255,255"/>
            <Option type="QString" name="name" value="triangle"/>
            <Option type="QString" name="outline_color" value="0,0,0,255"/>
            <Option type="QString" name="outline_width" value="0.5"/>
            <Option type="QString" name="size" value="4"/>
          </Option>
        </layer>
      </symbol>
      <symbol type="marker" name="1" alpha="1">
        <layer class="SimpleMarker" enabled="1" locked="0">
          <Option type="Map">
            <Option type="QString" name="color" value="255,255,255,255"/>
            <Option type="QString" name="name" value="square"/>
            <Option type="QString" name="outline_color" value="0,0,0,255"/>
            <Option type="QString" name="outline_width" value="0.5"/>
            <Option type="QString" name="size" value="3.5"/>
          </Option>
        </layer>
        <layer class="SimpleMarker" enabled="1" locked="0">
          <Option type="Map">
            <Option type="QString" name="color" value="0,0,0,255"/>
            <Option type="QString" name="name" value="square"/>
            <Option type="QString" name="outline_width" value="0"/>
            <Option type="QString" name="size" value="0.8"/>
          </Option>
        </layer>
      </symbol>
      <symbol type="marker" name="2" alpha="1">
        <layer class="SimpleMarker" enabled="1" locked="0">
          <Option type="Map">
            <Option type="QString" name="color" value="255,255,255,255"/>
            <Option type="QString" name="name" value="circle"/>
            <Option type="QString" name="outline_color" value="0,0,0,255"/>
            <Option type="QString" name="outline_width" value="0.5"/>
            <Option type="QString" name="size" value="3.5"/>
          </Option>
        </layer>
        <layer class="SimpleMarker" enabled="1" locked="0">
          <Option type="Map">
            <Option type="QString" name="color" value="0,0,0,255"/>
            <Option type="QString" name="name" value="circle"/>
            <Option type="QString" name="outline_width" value="0"/>
            <Option type="QString" name="size" value="1"/>
          </Option>
        </layer>
      </symbol>
      <symbol type="marker" name="3" alpha="1">
        <layer class="SimpleMarker" enabled="1" locked="0">
          <Option type="Map">
            <Option type="QString" name="color" value="255,255,255,255"/>
            <Option type="QString" name="name" value="circle"/>
            <Option type="QString" name="outline_color" value="0,0,0,255"/>
            <Option type="QString" name="outline_width" value="0.5"/>
            <Option type="QString" name="size" value="2.5"/>
          </Option>
        </layer>
        <layer class="SimpleMarker" enabled="1" locked="0">
          <Option type="Map">
            <Option type="QString" name="color" value="0,0,0,255"/>
            <Option type="QString" name="name" value="circle"/>
            <Option type="QString" name="outline_width" value="0"/>
            <Option type="QString" name="size" value="0.6"/>
          </Option>
        </layer>
      </symbol>
    </symbols>
  </renderer-v2>
</qgis>`;
        
        const blob = new Blob([qmlContent], {type: 'text/xml'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${siteName}_styles.qml`;
        a.click();
        setTimeout(() => URL.revokeObjectURL(url), 100);
        
        this.calculator.showNotification('QGIS —Å—Ç–∏–ª—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!');
    }

    exportPolygonStyle(fileName) {
        const qmlContent = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE qgis PUBLIC 'http://mrcc.com/qgis.dtd' 'SYSTEM'>
<qgis version="3.28.0">
  <renderer-v2 type="singleSymbol" symbollevels="0">
    <symbols>
      <symbol type="fill" name="0" alpha="1">
        <layer class="SimpleFill" enabled="1" locked="0">
          <Option type="Map">
            <Option type="QString" name="color" value="220,38,38,60"/>
            <Option type="QString" name="outline_color" value="220,38,38,255"/>
            <Option type="QString" name="outline_width" value="1"/>
            <Option type="QString" name="style" value="solid"/>
          </Option>
        </layer>
      </symbol>
    </symbols>
  </renderer-v2>
</qgis>`;
        
        const blob = new Blob([qmlContent], {type: 'text/xml'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${fileName}_style.qml`;
        a.click();
        setTimeout(() => URL.revokeObjectURL(url), 100);
    }

    exportInstruction(siteName) {
        const instruction = `–î–ï–¢–ê–õ–¨–ù–ê –Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –î–õ–Ø QGIS

–ü–Ü–î–ì–û–¢–û–í–ö–ê:
1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å QGIS 3.28+ –∑ qgis.org
2. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ –æ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ

–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•:
1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ QGIS
2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Layer > Add Layer > Add Vector Layer
3. –û–±–µ—Ä—ñ—Ç—å –≤–∞—à .geojson —Ñ–∞–π–ª –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ç—è–≥–Ω—ñ—Ç—å –π–æ–≥–æ –Ω–∞ –∫–∞—Ä—Ç—É
4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Add

–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–¢–ò–õ–Ü–í:
1. –ü—Ä–∞–≤–æ—é –∫–Ω–æ–ø–∫–æ—é –º–∏—à—ñ –Ω–∞ —à–∞—Ä –≤ Layers Panel
2. –û–±–µ—Ä—ñ—Ç—å Properties
3. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É Symbology
4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Style > Load Style
5. –û–±–µ—Ä—ñ—Ç—å –≤–∞—à .qml —Ñ–∞–π–ª
6. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Load Style —Ç–∞ OK

–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ü–û–î–ü–ò–°–Ü–í:
1. –í Symbology –æ–±–µ—Ä—ñ—Ç—å Labels
2. –í–º–∏–∫–Ω—ñ—Ç—å Show labels for this layer
3. –û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ TYPE –¥–ª—è –ø–æ–¥–ø–∏—Å—ñ–≤
4. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ä–æ–∑–º—ñ—Ä —Ç–∞ –∫–æ–ª—ñ—Ä —à—Ä–∏—Ñ—Ç—É

–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ö–û–û–†–î–ò–ù–ê–¢:
1. Project > Properties > CRS
2. –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É UTM –∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, EPSG:32636 –¥–ª—è UTM 36N)
3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å OK

–î–û–î–ê–¢–ö–û–í–Ü –ú–û–ñ–õ–ò–í–û–°–¢–Ü:
- –í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π: Measure Line tool
- –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â: Field Calculator
- –ï–∫—Å–ø–æ—Ä—Ç –≤ —ñ–Ω—à—ñ —Ñ–æ—Ä–º–∞—Ç–∏: –ü–ö–ú –Ω–∞ —à–∞—Ä > Export
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≥–æ–Ω—É: Vector > Geometry Tools > Points to Path

–ü–û–†–ê–î–ò:
- –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —è–∫ .qgz —Ñ–∞–π–ª
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Print Layout –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç
- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö —Ç–æ—á–æ–∫`;
        
        const blob = new Blob([instruction], {type: 'text/plain;charset=utf-8'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${siteName}_QGIS_instruction.txt`;
        a.click();
        setTimeout(() => URL.revokeObjectURL(url), 100);
        
        this.calculator.showNotification('–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è QGIS –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∞!');
    }

    getUTMZone() {
        const utmSelect = document.getElementById('utmZone');
        const value = utmSelect?.value;
        return value ? value.replace('utm', '') : '36';
    }
    
    exportGeoJSON(points, siteName) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —É–º–æ–≤
        if (!this.calculator.currentProjection) {
            this.calculator.showError('‚ùå –û–±–µ—Ä—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (UTM –∑–æ–Ω—É)');
            return;
        }
        
        if (!window.proj4) {
            this.calculator.showError('‚ùå Proj4 –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.');
            return;
        }
        
        try {
            this.calculator.showNotification('üó∫Ô∏è –°—Ç–≤–æ—Ä—é—î–º–æ GeoJSON...');
            
            const features = points.map(point => {
                const latLng = proj4(this.calculator.currentProjection, 'EPSG:4326', point.coords);
                return {
                    type: 'Feature',
                    properties: {
                        NAME: point.type,
                        TYPE: point.type,
                        UTM_X: Math.round(point.coords[0]),
                        UTM_Y: Math.round(point.coords[1]),
                        LAT: parseFloat(latLng[1].toFixed(6)),
                        LON: parseFloat(latLng[0].toFixed(6)),
                        ZONE: this.getUTMZone() + 'N'
                    },
                    geometry: {
                        type: 'Point',
                        coordinates: [latLng[0], latLng[1]]
                    }
                };
            });
            
            const geojson = {
                type: 'FeatureCollection',
                crs: {
                    type: 'name',
                    properties: {
                        name: 'EPSG:4326'
                    }
                },
                features: features
            };
            
            const blob = new Blob([JSON.stringify(geojson, null, 2)], {type: 'application/json'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${siteName}.geojson`;
            a.click();
            setTimeout(() => URL.revokeObjectURL(url), 100);
            
            this.calculator.showNotification('‚úÖ GeoJSON –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!');
            
        } catch (error) {
            console.error('GeoJSON export error:', error);
            this.calculator.showError('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É GeoJSON: ' + error.message);
        }
    }
}

window.QGISExport = QGISExport;