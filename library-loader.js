// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫
console.log('üìö –ó–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á –±—ñ–±–ª—ñ–æ—Ç–µ–∫ –∑–∞–ø—É—â–µ–Ω–æ...');

class LibraryLoader {
    constructor() {
        this.libraries = {
            proj4: {
                url: 'https://cdn.jsdelivr.net/npm/proj4@2.9.0/dist/proj4.min.js',
                check: () => window.proj4,
                name: 'Proj4.js (–ü—Ä–æ–µ–∫—Ü—ñ—ó –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)',
                loaded: false
            },
            turf: {
                url: 'https://unpkg.com/@turf/turf@6/turf.min.js',
                check: () => window.turf,
                name: 'Turf.js (–ì–µ–æ–ø—Ä–æ—Å—Ç–æ—Ä–æ–≤—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏)',
                loaded: false
            },
            xlsx: {
                url: 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js',
                check: () => window.XLSX,
                name: 'XLSX.js (–†–æ–±–æ—Ç–∞ –∑ Excel)',
                loaded: false
            },
            jszip: {
                url: 'https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js',
                check: () => window.JSZip,
                name: 'JSZip (–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—ñ–≤)',
                loaded: false
            },
            html2canvas: {
                url: 'https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js',
                check: () => window.html2canvas,
                name: 'html2canvas (–°–∫—Ä—ñ–Ω—à–æ—Ç–∏)',
                loaded: false
            },
            jspdf: {
                url: 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js',
                check: () => window.jspdf,
                name: 'jsPDF (–°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF)',
                loaded: false
            },
            domtoimage: {
                url: 'https://cdn.jsdelivr.net/npm/dom-to-image@2.6.0/dist/dom-to-image.min.js',
                check: () => window.domtoimage,
                name: 'dom-to-image (–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è DOM)',
                loaded: false
            },
            shpwrite: {
                url: 'https://unpkg.com/shp-write@0.3.2/shpwrite.js',
                check: () => window.shpwrite,
                name: 'shp-write (–°—Ç–≤–æ—Ä–µ–Ω–Ω—è SHP)',
                loaded: false
            },
            filesaver: {
                url: 'https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js',
                check: () => window.saveAs,
                name: 'FileSaver.js (–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤)',
                loaded: false
            }
        };
        
        this.loadedCount = 0;
        this.totalCount = Object.keys(this.libraries).length;
        this.onAllLoaded = null;
    }

    async loadScript(url) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = url;
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    async loadLibrary(key) {
        const lib = this.libraries[key];
        
        if (lib.check()) {
            lib.loaded = true;
            console.log(`‚úÖ ${lib.name} –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`);
            return true;
        }

        try {
            console.log(`üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ ${lib.name}...`);
            await this.loadScript(lib.url);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–æ—Å—å
            if (lib.check()) {
                lib.loaded = true;
                console.log(`‚úÖ ${lib.name} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
                return true;
            } else {
                console.warn(`‚ö†Ô∏è ${lib.name} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ window`);
                return false;
            }
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${lib.name}:`, error);
            return false;
        }
    }

    async loadAll() {
        console.log('üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫...');
        
        const promises = Object.keys(this.libraries).map(key => 
            this.loadLibrary(key).then(success => {
                if (success) this.loadedCount++;
                return { key, success };
            })
        );

        const results = await Promise.all(promises);
        
        console.log(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${this.loadedCount}/${this.totalCount} –±—ñ–±–ª—ñ–æ—Ç–µ–∫`);
        
        if (this.onAllLoaded) {
            this.onAllLoaded(results);
        }
        
        return results;
    }

    getStatus() {
        const status = {};
        Object.keys(this.libraries).forEach(key => {
            const lib = this.libraries[key];
            status[key] = {
                name: lib.name,
                loaded: lib.check() ? true : false
            };
        });
        return status;
    }

    async reloadLibrary(key) {
        if (!this.libraries[key]) return false;
        
        const lib = this.libraries[key];
        lib.loaded = false;
        
        return await this.loadLibrary(key);
    }
}

// –°—Ç–≤–æ—Ä—é—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á
window.libraryLoader = new LibraryLoader();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
window.libraryLoader.loadAll().then(() => {
    console.log('üéâ –í—Å—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
    // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ init.js
});

// –§—É–Ω–∫—Ü—ñ—è initializeApp –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ init.js