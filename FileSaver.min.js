/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define([], factory);
  } else if (typeof exports !== "undefined") {
    factory();
  } else {
    var mod = {
      exports: {}
    };
    factory();
    global.FileSaver = mod.exports;
  }
})(this, function () {
  "use strict";

  function bom(blob, opts) {
    if (typeof opts === 'undefined') opts = { autoBom: false };
    else if (typeof opts !== 'object') {
      console.warn('Deprecated: Expected third argument to be a object');
      opts = { autoBom: !opts };
    }

    if (opts.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
      return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type });
    }
    return blob;
  }

  function download(url, name, opts) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.responseType = 'blob';
    xhr.onload = function () {
      saveAs(xhr.response, name, opts);
    };
    xhr.onerror = function () {
      console.error('could not download file');
    };
    xhr.send();
  }

  function corsEnabled(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('HEAD', url, false);
    try {
      xhr.send();
    } catch (e) {}
    return xhr.status >= 200 && xhr.status <= 299;
  }

  function click(node) {
    try {
      node.dispatchEvent(new MouseEvent('click'));
    } catch (e) {
      var evt = document.createEvent('MouseEvents');
      evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
      node.dispatchEvent(evt);
    }
  }

  var isMacOSWebView = /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent);
  var saveAs = window.saveAs || window.webkitSaveAs || window.mozSaveAs || window.msSaveAs || (
    typeof window !== "undefined" && window.navigator && window.navigator.msSaveOrOpenBlob && function (blob, name) {
      return window.navigator.msSaveOrOpenBlob(bom(blob, opts), name);
    }
  ) || (
    function (blob, name, opts, popup) {
      popup = popup || open('', '_blank');
      if (popup) {
        popup.document.title =
        popup.document.body.innerText = 'downloading...';
      }

      if (isMacOSWebView) {
        if (typeof blob === "string") {
          popup.location.href = blob;
        } else {
          var reader = new FileReader();
          reader.onload = function (evt) {
            popup.location.href = evt.target.result;
          };
          reader.readAsDataURL(blob);
        }
      } else {
        if (typeof blob === "string") {
          download(blob, name, opts);
          return;
        }

        var URL = window.URL || window.webkitURL;
        var url = URL.createObjectURL(blob);
        if (popup) popup.location = url;
        else location = url;
        popup = null;
        setTimeout(function () {
          URL.revokeObjectURL(url);
        }, 4E4);
      }
    }
  );

  window.saveAs = saveAs.saveAs = saveAs;

  if (typeof module !== 'undefined') {
    module.exports = saveAs;
  }
});